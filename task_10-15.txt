11 = https://www.codewars.com/kata/5a043724ffe75fbab000009f = Slice the middle of a list backwards

def reverse_middle(lst):
    n = len(lst)
    
    if n < 4:
        raise ValueError("The list must contain at least four elements")
    mid = n // 2
    
    if n % 2 == 0:
        middle_elements = lst[mid-1:mid+1]
    else:
        middle_elements = lst[mid-1:mid+2]
    
    reversed_middle = middle_elements[::-1]
    
    return reversed_middle


12 = https://www.codewars.com/kata/56f3a1e899b386da78000732/train/python = Parts of a list

def partlist(arr):
    result = []
    for i in range(1, len(arr)):
        part1 = " ".join(arr[:i])
        part2 = " ".join(arr[i:])
        result.append((part1, part2))
    return result
13 = https://www.codewars.com/kata/5ac5e9aa3853da25d9000102/train/python = ORing arrays

def or_arrays(arr1, arr2, default=0):
    max_length = max(len(arr1), len(arr2))
    result = []
    
    for i in range(max_length):
        elem1 = arr1[i] if i < len(arr1) else default
        elem2 = arr2[i] if i < len(arr2) else default
        result.append(elem1 | elem2)
    
    return result

14 = https://www.codewars.com/kata/563cf89eb4747c5fb100001b/train/python = Remove the minimum

def remove_smallest(numbers):
    if not numbers:
        return []
    
    smallest_value = min(numbers)
    index_to_remove = numbers.index(smallest_value)
    return numbers[:index_to_remove] + numbers[index_to_remove + 1:]

15 = https://www.codewars.com/kata/5b011461de4c7f8d78000052/train/python = Offspring Traits

def bear_fur(parents):
    offspring_colors = {
        ('black', 'black'): 'black',
        ('brown', 'brown'): 'brown',
        ('white', 'white'): 'white',
        ('black', 'brown'): 'dark brown',
        ('brown', 'black'): 'dark brown',
        ('black', 'white'): 'grey',
        ('white', 'black'): 'grey',
        ('brown', 'white'): 'light brown',
        ('white', 'brown'): 'light brown'
    }
    
    parent1, parent2 = parents
    return offspring_colors.get((parent1, parent2), 'unknown')